// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emitvalues/sawzall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "emitvalues/sawzall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sawzall {
class SzlFieldProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SzlFieldProto>
     _instance;
} _SzlFieldProto_default_instance_;
class SzlTypeProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SzlTypeProto>
     _instance;
} _SzlTypeProto_default_instance_;

namespace protobuf_emitvalues_2fsawzall_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlFieldProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlFieldProto, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlFieldProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlFieldProto, tag_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SzlTypeProto, weight_),
  3,
  0,
  4,
  ~0u,
  ~0u,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(SzlFieldProto)},
  { 11, 23, sizeof(SzlTypeProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SzlFieldProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SzlTypeProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "emitvalues/sawzall.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SzlFieldProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SzlFieldProto_default_instance_);_SzlTypeProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SzlTypeProto_default_instance_);_SzlTypeProto_default_instance_._instance.get_mutable()->element_ = const_cast< ::sawzall::SzlFieldProto*>(
      ::sawzall::SzlFieldProto::internal_default_instance());
  _SzlTypeProto_default_instance_._instance.get_mutable()->weight_ = const_cast< ::sawzall::SzlFieldProto*>(
      ::sawzall::SzlFieldProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030emitvalues/sawzall.proto\022\007sawzall\"9\n\rS"
      "zlFieldProto\022\r\n\005Label\030\001 \002(\t\022\014\n\004Type\030\002 \002("
      "\t\022\013\n\003Tag\030\003 \001(\005\"\202\003\n\014SzlTypeProto\022\014\n\004Kind\030"
      "\001 \002(\005\022\r\n\005Table\030\002 \001(\t\022\r\n\005Param\030\003 \001(\005\022\'\n\007I"
      "ndices\030\004 \003(\0132\026.sawzall.SzlFieldProto\022&\n\006"
      "Fields\030\005 \003(\0132\026.sawzall.SzlFieldProto\022\'\n\007"
      "Element\030\006 \001(\0132\026.sawzall.SzlFieldProto\022&\n"
      "\006Weight\030\007 \001(\0132\026.sawzall.SzlFieldProto\"\243\001"
      "\n\004KIND\022\010\n\004VOID\020\000\022\010\n\004BOOL\020\001\022\t\n\005BYTES\020\002\022\017\n"
      "\013FINGERPRINT\020\003\022\t\n\005FLOAT\020\004\022\007\n\003INT\020\005\022\n\n\006ST"
      "RING\020\006\022\010\n\004TIME\020\007\022\t\n\005TUPLE\020\010\022\t\n\005ARRAY\020\t\022\007"
      "\n\003MAP\020\n\022\t\n\005TABLE\020\013\022\014\n\010FUNCTION\020\014\022\t\n\005NKIN"
      "D\020\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "emitvalues/sawzall.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_emitvalues_2fsawzall_2eproto

const ::google::protobuf::EnumDescriptor* SzlTypeProto_KIND_descriptor() {
  protobuf_emitvalues_2fsawzall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emitvalues_2fsawzall_2eproto::file_level_enum_descriptors[0];
}
bool SzlTypeProto_KIND_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SzlTypeProto_KIND SzlTypeProto::VOID;
const SzlTypeProto_KIND SzlTypeProto::BOOL;
const SzlTypeProto_KIND SzlTypeProto::BYTES;
const SzlTypeProto_KIND SzlTypeProto::FINGERPRINT;
const SzlTypeProto_KIND SzlTypeProto::FLOAT;
const SzlTypeProto_KIND SzlTypeProto::INT;
const SzlTypeProto_KIND SzlTypeProto::STRING;
const SzlTypeProto_KIND SzlTypeProto::TIME;
const SzlTypeProto_KIND SzlTypeProto::TUPLE;
const SzlTypeProto_KIND SzlTypeProto::ARRAY;
const SzlTypeProto_KIND SzlTypeProto::MAP;
const SzlTypeProto_KIND SzlTypeProto::TABLE;
const SzlTypeProto_KIND SzlTypeProto::FUNCTION;
const SzlTypeProto_KIND SzlTypeProto::NKIND;
const SzlTypeProto_KIND SzlTypeProto::KIND_MIN;
const SzlTypeProto_KIND SzlTypeProto::KIND_MAX;
const int SzlTypeProto::KIND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SzlFieldProto::kLabelFieldNumber;
const int SzlFieldProto::kTypeFieldNumber;
const int SzlFieldProto::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SzlFieldProto::SzlFieldProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emitvalues_2fsawzall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sawzall.SzlFieldProto)
}
SzlFieldProto::SzlFieldProto(const SzlFieldProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:sawzall.SzlFieldProto)
}

void SzlFieldProto::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = 0;
}

SzlFieldProto::~SzlFieldProto() {
  // @@protoc_insertion_point(destructor:sawzall.SzlFieldProto)
  SharedDtor();
}

void SzlFieldProto::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SzlFieldProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SzlFieldProto::descriptor() {
  protobuf_emitvalues_2fsawzall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emitvalues_2fsawzall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SzlFieldProto& SzlFieldProto::default_instance() {
  protobuf_emitvalues_2fsawzall_2eproto::InitDefaults();
  return *internal_default_instance();
}

SzlFieldProto* SzlFieldProto::New(::google::protobuf::Arena* arena) const {
  SzlFieldProto* n = new SzlFieldProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SzlFieldProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sawzall.SzlFieldProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
  }
  tag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SzlFieldProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sawzall.SzlFieldProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sawzall.SzlFieldProto.Label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sawzall.SzlFieldProto.Type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sawzall.SzlFieldProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sawzall.SzlFieldProto)
  return false;
#undef DO_
}

void SzlFieldProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sawzall.SzlFieldProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sawzall.SzlFieldProto.Label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // required string Type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sawzall.SzlFieldProto.Type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional int32 Tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sawzall.SzlFieldProto)
}

::google::protobuf::uint8* SzlFieldProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sawzall.SzlFieldProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sawzall.SzlFieldProto.Label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // required string Type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sawzall.SzlFieldProto.Type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 Tag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sawzall.SzlFieldProto)
  return target;
}

size_t SzlFieldProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sawzall.SzlFieldProto)
  size_t total_size = 0;

  if (has_label()) {
    // required string Label = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  if (has_type()) {
    // required string Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
size_t SzlFieldProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sawzall.SzlFieldProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Label = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());

    // required string Type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 Tag = 3;
  if (has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SzlFieldProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sawzall.SzlFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SzlFieldProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SzlFieldProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sawzall.SzlFieldProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sawzall.SzlFieldProto)
    MergeFrom(*source);
  }
}

void SzlFieldProto::MergeFrom(const SzlFieldProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sawzall.SzlFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SzlFieldProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sawzall.SzlFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SzlFieldProto::CopyFrom(const SzlFieldProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sawzall.SzlFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SzlFieldProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SzlFieldProto::Swap(SzlFieldProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SzlFieldProto::InternalSwap(SzlFieldProto* other) {
  using std::swap;
  label_.Swap(&other->label_);
  type_.Swap(&other->type_);
  swap(tag_, other->tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SzlFieldProto::GetMetadata() const {
  protobuf_emitvalues_2fsawzall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emitvalues_2fsawzall_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SzlFieldProto

// required string Label = 1;
bool SzlFieldProto::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SzlFieldProto::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void SzlFieldProto::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void SzlFieldProto::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& SzlFieldProto::label() const {
  // @@protoc_insertion_point(field_get:sawzall.SzlFieldProto.Label)
  return label_.GetNoArena();
}
void SzlFieldProto::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sawzall.SzlFieldProto.Label)
}
#if LANG_CXX11
void SzlFieldProto::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sawzall.SzlFieldProto.Label)
}
#endif
void SzlFieldProto::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sawzall.SzlFieldProto.Label)
}
void SzlFieldProto::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sawzall.SzlFieldProto.Label)
}
::std::string* SzlFieldProto::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:sawzall.SzlFieldProto.Label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SzlFieldProto::release_label() {
  // @@protoc_insertion_point(field_release:sawzall.SzlFieldProto.Label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SzlFieldProto::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:sawzall.SzlFieldProto.Label)
}

// required string Type = 2;
bool SzlFieldProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SzlFieldProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SzlFieldProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SzlFieldProto::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& SzlFieldProto::type() const {
  // @@protoc_insertion_point(field_get:sawzall.SzlFieldProto.Type)
  return type_.GetNoArena();
}
void SzlFieldProto::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sawzall.SzlFieldProto.Type)
}
#if LANG_CXX11
void SzlFieldProto::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sawzall.SzlFieldProto.Type)
}
#endif
void SzlFieldProto::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sawzall.SzlFieldProto.Type)
}
void SzlFieldProto::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sawzall.SzlFieldProto.Type)
}
::std::string* SzlFieldProto::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:sawzall.SzlFieldProto.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SzlFieldProto::release_type() {
  // @@protoc_insertion_point(field_release:sawzall.SzlFieldProto.Type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SzlFieldProto::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:sawzall.SzlFieldProto.Type)
}

// optional int32 Tag = 3;
bool SzlFieldProto::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SzlFieldProto::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void SzlFieldProto::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void SzlFieldProto::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
::google::protobuf::int32 SzlFieldProto::tag() const {
  // @@protoc_insertion_point(field_get:sawzall.SzlFieldProto.Tag)
  return tag_;
}
void SzlFieldProto::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:sawzall.SzlFieldProto.Tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SzlTypeProto::kKindFieldNumber;
const int SzlTypeProto::kTableFieldNumber;
const int SzlTypeProto::kParamFieldNumber;
const int SzlTypeProto::kIndicesFieldNumber;
const int SzlTypeProto::kFieldsFieldNumber;
const int SzlTypeProto::kElementFieldNumber;
const int SzlTypeProto::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SzlTypeProto::SzlTypeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_emitvalues_2fsawzall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sawzall.SzlTypeProto)
}
SzlTypeProto::SzlTypeProto(const SzlTypeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      indices_(from.indices_),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table()) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_element()) {
    element_ = new ::sawzall::SzlFieldProto(*from.element_);
  } else {
    element_ = NULL;
  }
  if (from.has_weight()) {
    weight_ = new ::sawzall::SzlFieldProto(*from.weight_);
  } else {
    weight_ = NULL;
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(param_));
  // @@protoc_insertion_point(copy_constructor:sawzall.SzlTypeProto)
}

void SzlTypeProto::SharedCtor() {
  _cached_size_ = 0;
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&element_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&element_)) + sizeof(param_));
}

SzlTypeProto::~SzlTypeProto() {
  // @@protoc_insertion_point(destructor:sawzall.SzlTypeProto)
  SharedDtor();
}

void SzlTypeProto::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete element_;
  if (this != internal_default_instance()) delete weight_;
}

void SzlTypeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SzlTypeProto::descriptor() {
  protobuf_emitvalues_2fsawzall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emitvalues_2fsawzall_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SzlTypeProto& SzlTypeProto::default_instance() {
  protobuf_emitvalues_2fsawzall_2eproto::InitDefaults();
  return *internal_default_instance();
}

SzlTypeProto* SzlTypeProto::New(::google::protobuf::Arena* arena) const {
  SzlTypeProto* n = new SzlTypeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SzlTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sawzall.SzlTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!table_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*table_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(element_ != NULL);
      element_->::sawzall::SzlFieldProto::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(weight_ != NULL);
      weight_->::sawzall::SzlFieldProto::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_) -
        reinterpret_cast<char*>(&kind_)) + sizeof(param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SzlTypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sawzall.SzlTypeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sawzall.SzlTypeProto.Table");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sawzall.SzlFieldProto Indices = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sawzall.SzlFieldProto Fields = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sawzall.SzlFieldProto Element = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sawzall.SzlFieldProto Weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sawzall.SzlTypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sawzall.SzlTypeProto)
  return false;
#undef DO_
}

void SzlTypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sawzall.SzlTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Kind = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // optional string Table = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sawzall.SzlTypeProto.Table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // optional int32 Param = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }

  // repeated .sawzall.SzlFieldProto Indices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->indices(static_cast<int>(i)), output);
  }

  // repeated .sawzall.SzlFieldProto Fields = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fields(static_cast<int>(i)), output);
  }

  // optional .sawzall.SzlFieldProto Element = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->element_, output);
  }

  // optional .sawzall.SzlFieldProto Weight = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sawzall.SzlTypeProto)
}

::google::protobuf::uint8* SzlTypeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sawzall.SzlTypeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Kind = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // optional string Table = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sawzall.SzlTypeProto.Table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // optional int32 Param = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }

  // repeated .sawzall.SzlFieldProto Indices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->indices(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sawzall.SzlFieldProto Fields = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->fields(static_cast<int>(i)), deterministic, target);
  }

  // optional .sawzall.SzlFieldProto Element = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->element_, deterministic, target);
  }

  // optional .sawzall.SzlFieldProto Weight = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sawzall.SzlTypeProto)
  return target;
}

size_t SzlTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sawzall.SzlTypeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 Kind = 1;
  if (has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kind());
  }
  // repeated .sawzall.SzlFieldProto Indices = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->indices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indices(static_cast<int>(i)));
    }
  }

  // repeated .sawzall.SzlFieldProto Fields = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fields(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string Table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // optional .sawzall.SzlFieldProto Element = 6;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->element_);
    }

    // optional .sawzall.SzlFieldProto Weight = 7;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_);
    }

  }
  // optional int32 Param = 3;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SzlTypeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sawzall.SzlTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SzlTypeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SzlTypeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sawzall.SzlTypeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sawzall.SzlTypeProto)
    MergeFrom(*source);
  }
}

void SzlTypeProto::MergeFrom(const SzlTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sawzall.SzlTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  fields_.MergeFrom(from.fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_table();
      table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_element()->::sawzall::SzlFieldProto::MergeFrom(from.element());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_weight()->::sawzall::SzlFieldProto::MergeFrom(from.weight());
    }
    if (cached_has_bits & 0x00000008u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000010u) {
      param_ = from.param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SzlTypeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sawzall.SzlTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SzlTypeProto::CopyFrom(const SzlTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sawzall.SzlTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SzlTypeProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->indices())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fields())) return false;
  if (has_element()) {
    if (!this->element_->IsInitialized()) return false;
  }
  if (has_weight()) {
    if (!this->weight_->IsInitialized()) return false;
  }
  return true;
}

void SzlTypeProto::Swap(SzlTypeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SzlTypeProto::InternalSwap(SzlTypeProto* other) {
  using std::swap;
  indices_.InternalSwap(&other->indices_);
  fields_.InternalSwap(&other->fields_);
  table_.Swap(&other->table_);
  swap(element_, other->element_);
  swap(weight_, other->weight_);
  swap(kind_, other->kind_);
  swap(param_, other->param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SzlTypeProto::GetMetadata() const {
  protobuf_emitvalues_2fsawzall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_emitvalues_2fsawzall_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SzlTypeProto

// required int32 Kind = 1;
bool SzlTypeProto::has_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SzlTypeProto::set_has_kind() {
  _has_bits_[0] |= 0x00000008u;
}
void SzlTypeProto::clear_has_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
void SzlTypeProto::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
::google::protobuf::int32 SzlTypeProto::kind() const {
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Kind)
  return kind_;
}
void SzlTypeProto::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:sawzall.SzlTypeProto.Kind)
}

// optional string Table = 2;
bool SzlTypeProto::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SzlTypeProto::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void SzlTypeProto::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void SzlTypeProto::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table();
}
const ::std::string& SzlTypeProto::table() const {
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Table)
  return table_.GetNoArena();
}
void SzlTypeProto::set_table(const ::std::string& value) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sawzall.SzlTypeProto.Table)
}
#if LANG_CXX11
void SzlTypeProto::set_table(::std::string&& value) {
  set_has_table();
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sawzall.SzlTypeProto.Table)
}
#endif
void SzlTypeProto::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sawzall.SzlTypeProto.Table)
}
void SzlTypeProto::set_table(const char* value, size_t size) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sawzall.SzlTypeProto.Table)
}
::std::string* SzlTypeProto::mutable_table() {
  set_has_table();
  // @@protoc_insertion_point(field_mutable:sawzall.SzlTypeProto.Table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SzlTypeProto::release_table() {
  // @@protoc_insertion_point(field_release:sawzall.SzlTypeProto.Table)
  clear_has_table();
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SzlTypeProto::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    set_has_table();
  } else {
    clear_has_table();
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:sawzall.SzlTypeProto.Table)
}

// optional int32 Param = 3;
bool SzlTypeProto::has_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SzlTypeProto::set_has_param() {
  _has_bits_[0] |= 0x00000010u;
}
void SzlTypeProto::clear_has_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void SzlTypeProto::clear_param() {
  param_ = 0;
  clear_has_param();
}
::google::protobuf::int32 SzlTypeProto::param() const {
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Param)
  return param_;
}
void SzlTypeProto::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:sawzall.SzlTypeProto.Param)
}

// repeated .sawzall.SzlFieldProto Indices = 4;
int SzlTypeProto::indices_size() const {
  return indices_.size();
}
void SzlTypeProto::clear_indices() {
  indices_.Clear();
}
const ::sawzall::SzlFieldProto& SzlTypeProto::indices(int index) const {
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Indices)
  return indices_.Get(index);
}
::sawzall::SzlFieldProto* SzlTypeProto::mutable_indices(int index) {
  // @@protoc_insertion_point(field_mutable:sawzall.SzlTypeProto.Indices)
  return indices_.Mutable(index);
}
::sawzall::SzlFieldProto* SzlTypeProto::add_indices() {
  // @@protoc_insertion_point(field_add:sawzall.SzlTypeProto.Indices)
  return indices_.Add();
}
::google::protobuf::RepeatedPtrField< ::sawzall::SzlFieldProto >*
SzlTypeProto::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:sawzall.SzlTypeProto.Indices)
  return &indices_;
}
const ::google::protobuf::RepeatedPtrField< ::sawzall::SzlFieldProto >&
SzlTypeProto::indices() const {
  // @@protoc_insertion_point(field_list:sawzall.SzlTypeProto.Indices)
  return indices_;
}

// repeated .sawzall.SzlFieldProto Fields = 5;
int SzlTypeProto::fields_size() const {
  return fields_.size();
}
void SzlTypeProto::clear_fields() {
  fields_.Clear();
}
const ::sawzall::SzlFieldProto& SzlTypeProto::fields(int index) const {
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Fields)
  return fields_.Get(index);
}
::sawzall::SzlFieldProto* SzlTypeProto::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:sawzall.SzlTypeProto.Fields)
  return fields_.Mutable(index);
}
::sawzall::SzlFieldProto* SzlTypeProto::add_fields() {
  // @@protoc_insertion_point(field_add:sawzall.SzlTypeProto.Fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::sawzall::SzlFieldProto >*
SzlTypeProto::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:sawzall.SzlTypeProto.Fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::sawzall::SzlFieldProto >&
SzlTypeProto::fields() const {
  // @@protoc_insertion_point(field_list:sawzall.SzlTypeProto.Fields)
  return fields_;
}

// optional .sawzall.SzlFieldProto Element = 6;
bool SzlTypeProto::has_element() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SzlTypeProto::set_has_element() {
  _has_bits_[0] |= 0x00000002u;
}
void SzlTypeProto::clear_has_element() {
  _has_bits_[0] &= ~0x00000002u;
}
void SzlTypeProto::clear_element() {
  if (element_ != NULL) element_->::sawzall::SzlFieldProto::Clear();
  clear_has_element();
}
const ::sawzall::SzlFieldProto& SzlTypeProto::element() const {
  const ::sawzall::SzlFieldProto* p = element_;
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Element)
  return p != NULL ? *p : *reinterpret_cast<const ::sawzall::SzlFieldProto*>(
      &::sawzall::_SzlFieldProto_default_instance_);
}
::sawzall::SzlFieldProto* SzlTypeProto::mutable_element() {
  set_has_element();
  if (element_ == NULL) {
    element_ = new ::sawzall::SzlFieldProto;
  }
  // @@protoc_insertion_point(field_mutable:sawzall.SzlTypeProto.Element)
  return element_;
}
::sawzall::SzlFieldProto* SzlTypeProto::release_element() {
  // @@protoc_insertion_point(field_release:sawzall.SzlTypeProto.Element)
  clear_has_element();
  ::sawzall::SzlFieldProto* temp = element_;
  element_ = NULL;
  return temp;
}
void SzlTypeProto::set_allocated_element(::sawzall::SzlFieldProto* element) {
  delete element_;
  element_ = element;
  if (element) {
    set_has_element();
  } else {
    clear_has_element();
  }
  // @@protoc_insertion_point(field_set_allocated:sawzall.SzlTypeProto.Element)
}

// optional .sawzall.SzlFieldProto Weight = 7;
bool SzlTypeProto::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SzlTypeProto::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void SzlTypeProto::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void SzlTypeProto::clear_weight() {
  if (weight_ != NULL) weight_->::sawzall::SzlFieldProto::Clear();
  clear_has_weight();
}
const ::sawzall::SzlFieldProto& SzlTypeProto::weight() const {
  const ::sawzall::SzlFieldProto* p = weight_;
  // @@protoc_insertion_point(field_get:sawzall.SzlTypeProto.Weight)
  return p != NULL ? *p : *reinterpret_cast<const ::sawzall::SzlFieldProto*>(
      &::sawzall::_SzlFieldProto_default_instance_);
}
::sawzall::SzlFieldProto* SzlTypeProto::mutable_weight() {
  set_has_weight();
  if (weight_ == NULL) {
    weight_ = new ::sawzall::SzlFieldProto;
  }
  // @@protoc_insertion_point(field_mutable:sawzall.SzlTypeProto.Weight)
  return weight_;
}
::sawzall::SzlFieldProto* SzlTypeProto::release_weight() {
  // @@protoc_insertion_point(field_release:sawzall.SzlTypeProto.Weight)
  clear_has_weight();
  ::sawzall::SzlFieldProto* temp = weight_;
  weight_ = NULL;
  return temp;
}
void SzlTypeProto::set_allocated_weight(::sawzall::SzlFieldProto* weight) {
  delete weight_;
  weight_ = weight;
  if (weight) {
    set_has_weight();
  } else {
    clear_has_weight();
  }
  // @@protoc_insertion_point(field_set_allocated:sawzall.SzlTypeProto.Weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sawzall

// @@protoc_insertion_point(global_scope)
